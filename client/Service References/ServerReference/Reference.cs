//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace client.ServerReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileContract", Namespace="http://schemas.datacontract.org/2004/07/server")]
    [System.SerializableAttribute()]
    public partial class FileContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] BytesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FilePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IPField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Bytes {
            get {
                return this.BytesField;
            }
            set {
                if ((object.ReferenceEquals(this.BytesField, value) != true)) {
                    this.BytesField = value;
                    this.RaisePropertyChanged("Bytes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FilePath {
            get {
                return this.FilePathField;
            }
            set {
                if ((object.ReferenceEquals(this.FilePathField, value) != true)) {
                    this.FilePathField = value;
                    this.RaisePropertyChanged("FilePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IP {
            get {
                return this.IPField;
            }
            set {
                if ((object.ReferenceEquals(this.IPField, value) != true)) {
                    this.IPField = value;
                    this.RaisePropertyChanged("IP");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServerReference.IServer")]
    public interface IServer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/sendMessage", ReplyAction="http://tempuri.org/IServer/sendMessageResponse")]
        string sendMessage(string command, client.ServerReference.FileContract fc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/sendMessage", ReplyAction="http://tempuri.org/IServer/sendMessageResponse")]
        System.Threading.Tasks.Task<string> sendMessageAsync(string command, client.ServerReference.FileContract fc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/SetFile", ReplyAction="http://tempuri.org/IServer/SetFileResponse")]
        void SetFile(client.ServerReference.FileContract fileContract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/SetFile", ReplyAction="http://tempuri.org/IServer/SetFileResponse")]
        System.Threading.Tasks.Task SetFileAsync(client.ServerReference.FileContract fileContract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/SendFile", ReplyAction="http://tempuri.org/IServer/SendFileResponse")]
        void SendFile(client.ServerReference.FileContract fileContract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/SendFile", ReplyAction="http://tempuri.org/IServer/SendFileResponse")]
        System.Threading.Tasks.Task SendFileAsync(client.ServerReference.FileContract fileContract);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServerChannel : client.ServerReference.IServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServerClient : System.ServiceModel.ClientBase<client.ServerReference.IServer>, client.ServerReference.IServer {
        
        public ServerClient() {
        }
        
        public ServerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string sendMessage(string command, client.ServerReference.FileContract fc) {
            return base.Channel.sendMessage(command, fc);
        }
        
        public System.Threading.Tasks.Task<string> sendMessageAsync(string command, client.ServerReference.FileContract fc) {
            return base.Channel.sendMessageAsync(command, fc);
        }
        
        public void SetFile(client.ServerReference.FileContract fileContract) {
            base.Channel.SetFile(fileContract);
        }
        
        public System.Threading.Tasks.Task SetFileAsync(client.ServerReference.FileContract fileContract) {
            return base.Channel.SetFileAsync(fileContract);
        }
        
        public void SendFile(client.ServerReference.FileContract fileContract) {
            base.Channel.SendFile(fileContract);
        }
        
        public System.Threading.Tasks.Task SendFileAsync(client.ServerReference.FileContract fileContract) {
            return base.Channel.SendFileAsync(fileContract);
        }
    }
}
